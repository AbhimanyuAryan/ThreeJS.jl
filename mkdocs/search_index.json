{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nA Julia module to render graphical objects, especially 3-D objects, using\nthe \nthree.js\n abstraction over WebGL.\nOutputs \nPatchwork\n Elems of\n\nthree-js\n custom elements. Meant to be\nused to help packages like \nCompose3D\n\nrender 3D output.\n\n\nWhere can these be used?\n\n\nThis can be used in \nIJulia\n\nand \nEscher\n to embed 3D graphics.\n\n\nDependencies\n\n\nWebGL lets you interact with the GPU in a browser. As long as you have a modern\nbrowser, and it supports WebGL (Check this \nlink\n\nto see if it does!), the output of this package will just work.\n\n\nInstallation\n\n\nPkg.add(\nThreeJS\n)\n\n\n\n\nIJulia\n\n\nFor use in IJulia notebooks, \nusing ThreeJS\n will set up everything including\nstatic files.\n\n\nNOTE: If you are restarting the kernel, and doing \nusing ThreeJS\n again, please\nreload the page, after deleting the cell where you did \nusing ThreeJS\n.\n\n\nEscher\n\n\nAdding \npush!(window.assets,(\"ThreeJS\",\"threejs\"))\n in your Escher code,\nwill get the static files set up and you can do 3D Graphics in Escher!\n\n\nGeneral web servers\n\n\nTo use in a web server, you will need to serve the asset files found in the\n\nassets/\n directory. Then adding a HTML import to the \nthree-js.html\n file in\nthe \nassets/bower_components/three-js\n will get you all set up! This is done\nby adding the following line to your HTML file.\n\n\nlink rel=\nimport\n href=\nassets/bower_components/three-js/three-js.html", 
            "title": "Home"
        }, 
        {
            "location": "/#introduction", 
            "text": "A Julia module to render graphical objects, especially 3-D objects, using\nthe  three.js  abstraction over WebGL.\nOutputs  Patchwork  Elems of three-js  custom elements. Meant to be\nused to help packages like  Compose3D \nrender 3D output.  Where can these be used?  This can be used in  IJulia \nand  Escher  to embed 3D graphics.  Dependencies  WebGL lets you interact with the GPU in a browser. As long as you have a modern\nbrowser, and it supports WebGL (Check this  link \nto see if it does!), the output of this package will just work.  Installation  Pkg.add( ThreeJS )  IJulia  For use in IJulia notebooks,  using ThreeJS  will set up everything including\nstatic files.  NOTE: If you are restarting the kernel, and doing  using ThreeJS  again, please\nreload the page, after deleting the cell where you did  using ThreeJS .  Escher  Adding  push!(window.assets,(\"ThreeJS\",\"threejs\"))  in your Escher code,\nwill get the static files set up and you can do 3D Graphics in Escher!  General web servers  To use in a web server, you will need to serve the asset files found in the assets/  directory. Then adding a HTML import to the  three-js.html  file in\nthe  assets/bower_components/three-js  will get you all set up! This is done\nby adding the following line to your HTML file.  link rel= import  href= assets/bower_components/three-js/three-js.html", 
            "title": "Introduction"
        }, 
        {
            "location": "/manual/", 
            "text": "How to create a scene?\n\n\nFor rendering Three-JS elements, all tags should be nested in a \nthree-js\n tag.\nThis can be done by using the \ninitscene\n function. An outer div to put this in\nis also required and can be created by using the \nouterdiv\n function.\n\n\nThe code snippet below should get a scene initialized.\n\n\nusing ThreeJS\nouterdiv() \n initscene()\n\n\n\n\nBy default, a scene of \n1000px x 562px\n is created. Support to change this will\nbe added soon.\n\n\nCreating meshes\n\n\nIn Three-JS, meshes are objects that can be drawn in the scene. These require a\n\ngeometry\n and a \nmaterial\n to be created. Meshes decide the properties as to the\nposition of where the object is drawn.\n\n\nA mesh can be created using the \nmesh\n function taking the coordinates \n(x,y,z)\n\nas its arguments.\n\n\nA \ngeometry\n and a \nmaterial\n element should be nested inside this \nmesh\n.\n\n\nGeometries\n\n\nGeometries hold all details necessary to describe a 3D model. These can be\nthought of as the shapes we want to display.\n\n\nThreeJS.jl provides support to render the following geometry primitives:\n\n\n\n\nBoxes - \nbox(width, height, depth)\n\n\nSpheres - \nsphere(radius)\n\n\nPyramids - \npyramid(base, height)\n\n\nCylinders - \ncylinder(topradius, bottomradius, height)\n\n\nTori - \ntorus(radius, tuberadius)\n\n\nParametric Surfaces - \nparametric(slices, stacks, xrange, yrange, function)\n\n\nDodecahedron - \ndodecahedron(radius)\n\n\nIcosahedron - \nicosahedron(radius)\n\n\nOctahedron - \noctahedron(radius)\n\n\nTetrahedron - \ntetrahedron(radius)\n\n\nPlanes - \nplane(width, height)\n\n\n\n\nThese functions will return the appropriate \ngeometry\n tags that are to be nested\ninside a \nmesh\n along with a \nmaterial\n to render.\n\n\nCustom Geometries\n\n\nThe \ngeometry\n function is able to render custom geometries, which are specified\nby the vertices and the faces.\n\n\nMaterials\n\n\nMaterials are what decides how the model responds to light, color and such\nproperties of the material.\n\n\nA \nmaterial\n tag is created by using the \nmaterial\n function. Properties are\nto be passed as a \nDict\n to this function.\n\n\nAvailable properties are:\n\n\n\n\ncolor\n - Can be any CSS color value.\n\n\nkind\n - Can be \nlambert\n,\n\nbasic\n,\n\nphong\n, or\n\nnormal\n\n\nwireframe\n - \ntrue\n or \nfalse\n\n\nvisible\n - \ntrue\n or \nfalse\n\n\n\n\nSome helper functions to get these key value pairs is given in \nsrc/properties.jl\n.\n\n\nPutting them together\n\n\nmesh(0.0, 0.0, 0.0) \n\n    [box(1.0,1.0,1.0), material(Dict(:kind=\nbasic\n,:color=\nred\n)]\n\n\n\n\nwill create a cube of size 1.0 of red color and with the basic material.\n\n\nLines\n\n\nLines can be drawn by specifying the vertices of the line in the order to be\njoined. Lines can either be of \n\"strip\"\n or \n\"pieces\"\n kinds, which decide how\nthe vertices should be joined. \n\"strip\"\n lines join all vertices, while \"pieces\"\nonly joins the first and second, third and fourth and so on. Colors for the\nvertices of the lines can also be specified.\n\n\nLines are also meshes and has the properties of a mesh too, like position and\nrotation. Like meshes, they are a child of the \nscene\n.\n\n\nLine Materials\n\n\nLines also require a material to decide properties of a line.\nThe \nlinematerial\n function can be used to do this and specify some properties\nfor the line. The \nlinematerial\n should be a child of the \nline\n element.\n\n\nDrawing lines\n\n\nThe \nline\n function can be used to draw lines.\n\n\nline([(0.0, 0.0, 0.0), (1.0, 1.0, 1.0)]) \n\n        linematerial(Dict(:color=\nred\n))\n\n\n\n\nMesh grids\n\n\nDrawing mesh grids can be achieved by using the \nmeshlines\n function. It creates\na set of lines to form the grid and assigns colors to the vertices based on the\nz values.\n\n\nIf you are looking for a 2D grid, use the \ngrid\n function. It creates a grid on\nthe XY plane which can then be rotated as required.\n\n\nCameras\n\n\nNo 3D scene can be properly displayed without a camera to view from. ThreeJS.jl\nprovides support for a Perspective Camera view using the \ncamera\n function.\n\n\nThis sets the position of the camera, along with properties like \nnear\n plane,\n\nfar\n plane, \nfov\n for field of view (in degrees), and \naspect\n ratio.\n\n\nThe \ncamera\n tag should be a child of the \nscene\n.\n\n\nLights\n\n\nThreeJS.jl provides support for 3 kinds of lighting.\n\n\n\n\nAmbient\n - \nambientlight(color)\n\n\nPoint\n -\n\npointlight(x, y, z; color, intensity, distance)\n\n\nSpot\n -\n\nspotlight(x, y, z; color, intensity, distance, angle, exponent, shadow)\n\n\n\n\nThese tags should also be a child of the \nscene\n.\n\n\nControls\n\n\nBy default, ThreeJS adds \nTrackballControls\n\nto every scene drawn. This lets you interact with the scene by using the\ntrackpad or mouse to rotate, pan and zoom.\n\n\nInteractivity\n\n\nYou can use the \nreactive functionality\n\nprovided by Escher to create Signals of the 3D graphic elements produced.\nThese can let you create graphics that can be interacted with using UI elements\nlike sliders. Try launching \nescher --serve\n (if you have Escher installed)\nin the \nexamples/\n directory and heading to \nlocalhost:5555/box.jl\n on the\nbrowser. You can see a box whose width, depth, height and rotation about\neach axes can be set and the box will update accordingly!\n\n\nCurrently, this functionality does not work in IJulia notebooks. Hopefully,\nthis will be fixed soon and you can use \nInteract\n(https://github.com/JuliaLang/Interact.jl)\nto do the same in IJulia notebooks.\n\n\nAnimations\n\n\nYou can also do animations by using Reactive signals. See\n\nexamples/rotatingcube.jl\n as an example. It is implemented in Escher,\nso running an Escher server from that directory and heading to\n\nlocalhost:5555/rotatingcube.jl\n should give you a cube which is\nrotating!\n\n\nNOTE: Adding new objects to a scene will force a redraw of the scene, resetting\nthe camera.\n\n\nExample\n\n\nusing ThreeJS\nouterdiv() \n (initscene() \n\n    [\n        mesh(0.0, 0.0, 0.0) \n\n        [\n            box(1.0,1.0,1.0), material(Dict(:kind=\nlambert\n,:color=\nred\n))\n        ],\n        pointlight(3.0, 3.0, 3.0),\n        camera(0.0, 0.0, 10.0)\n    ])\n\n\n\n\nRunning the above in an IJulia notebook should draw a red cube,\nwhich is illuminated by a light from a corner.\n\n\nFor Escher, after the script above is run, the following code should give the\nsame result.\n\n\nusing ThreeJS\nusing Compat\n\nmain(window) = begin\n    push!(window.assets,(\nThreeJS\n,\nthreejs\n))\n    vbox(\n        title(2,\nThreeJS\n),\n        outerdiv() \n\n        (\n        initscene() \n\n        [\n            mesh(0.0, 0.0, 0.0) \n\n                [\n                    ThreeJS.box(1.0, 1.0, 1.0),\n                    material(Dict(:kind=\nlambert\n,:color=\nred\n))\n                ],\n            pointlight(3.0, 3.0, 3.0),\n            camera(0.0, 0.0, 10.0)\n        ]\n        )\n    )\nend", 
            "title": "Manual"
        }, 
        {
            "location": "/api/ThreeJS/", 
            "text": "ThreeJS\n\n\nExported\n\n\n\n\n\n\nambientlight() \n\u00b6\n\n\nCreates an ambient light tag.\nAmbient light is applied equally to all objects.\nThe color of the light is set using the \ncolor\n argument.\n\n\nsource:\n\n\nThreeJS/src/render.jl:351\n\n\n\n\n\n\nambientlight(color::ColorTypes.RGB{FixedPointNumbers.UfixedBase{UInt8, 8}}) \n\u00b6\n\n\nCreates an ambient light tag.\nAmbient light is applied equally to all objects.\nThe color of the light is set using the \ncolor\n argument.\n\n\nsource:\n\n\nThreeJS/src/render.jl:351\n\n\n\n\n\n\nbox(w::Float64,  h::Float64,  d::Float64) \n\u00b6\n\n\nCreates a Box geometry of width \nw\n, height \nh\n and depth \nd\n.\nShould be put in a \nmesh\n along with another material Elem to render.\n\n\nsource:\n\n\nThreeJS/src/render.jl:35\n\n\n\n\n\n\ncamera(x::Float64,  y::Float64,  z::Float64) \n\u00b6\n\n\nCreates a camera tag.\nPerspective camera at position \n(x,y,z)\n created. Keyword arguments of \nnear\n,\n\nfar\n,\naspect\n, and \nfov\n is accepted.\n\n\nsource:\n\n\nThreeJS/src/render.jl:266\n\n\n\n\n\n\ncylinder(top::Float64,  bottom::Float64,  height::Float64) \n\u00b6\n\n\nCreates a Cylinder geometry of bottom radius \nbottom\n, top radius \ntop\n and\nheight \nh\n.\nShould be put in a \nmesh\n along with another material Elem to render.\n\n\nsource:\n\n\nThreeJS/src/render.jl:60\n\n\n\n\n\n\ndodecahedron(radius::Float64) \n\u00b6\n\n\nCreates a Dodecahedron geometry of radius \nradius\n.\nShould be put in a \nmesh\n along with another material Elem to render.\n\n\nsource:\n\n\nThreeJS/src/render.jl:82\n\n\n\n\n\n\ngeometry(vertices::Array{Tuple{Float64, Float64, Float64}, 1},  faces::Array{Tuple{Int64, Int64, Int64}, 1}) \n\u00b6\n\n\nCreates a geometry.\nThis should be a child of a \nmesh\n.\nVertices of the geometry are passed in as a vector of \nTuples\n of the coordinates\nalong with faces of the geometry which are again passed in as a vector of \nTuples\n\nof \nInt\n representing the indices of the vertices to be joined.\n\n\nsource:\n\n\nThreeJS/src/render.jl:141\n\n\n\n\n\n\ngrid(size::Float64,  step::Float64) \n\u00b6\n\n\nCreates a grid element.\nThese should be a child of the scene tag created by \ninitscene\n.\nThe \nsize\n represents the total size and the \nstep\n represents the distance\nbetween consecutive lines of the grid.\n\n\nThe grid can be translated and rotated using keyword arguments,\n\nx\n,\ny\n,\nz\n for the (x, y, z) coordinate and \nrx\n, \nry\n and \nrz\n\nas the rotation about the X, Y and Z axes respectively.\n\n\nsource:\n\n\nThreeJS/src/render.jl:474\n\n\n\n\n\n\nicosahedron(radius::Float64) \n\u00b6\n\n\nCreates a icosahedron geometry of radius \nradius\n.\nShould be put in a \nmesh\n along with another material Elem to render.\n\n\nsource:\n\n\nThreeJS/src/render.jl:93\n\n\n\n\n\n\ninitscene() \n\u00b6\n\n\nInitiates a three-js scene\n\n\nsource:\n\n\nThreeJS/src/ThreeJS.jl:17\n\n\n\n\n\n\nline(vertices::Array{Tuple{Float64, Float64, Float64}, 1}) \n\u00b6\n\n\nCreates a line tag.\nLine tags should be a child of the scene tag created by \ninitscene\n.\n\n\nVertices of the line to be drawn should be passed in as a \nVector\n of\n\nTuple{Float64, Float64, Float64}\n.\nThe material to be associated with the line can be set using\n\nlinematerial\n which should be a child of the line tag.\n\n\nA keyword argument, \nkind\n is also provided to set how the lines\nshould be drawn. \n\"strip\"\n and \n\"pieces\"\n are the possible values.\n\n\nThe line can be translated and rotated using keyword arguments,\n\nx\n,\ny\n,\nz\n for the (x, y, z) coordinate and \nrx\n, \nry\n and \nrz\n\nas the rotation about the X, Y and Z axes respectively.\n\n\nColors for the vertices can be set by passing in a \nVector\n of\n\nColor\n as the \nvertexcolors\n kwarg.\n\n\nsource:\n\n\nThreeJS/src/render.jl:378\n\n\n\n\n\n\nline(verticeswithcolor::Array{Tuple{Float64, Float64, Float64, ColorTypes.Color{T, N}}, 1}) \n\u00b6\n\n\nHelper function to make creating \nline\n easier.\n\nTuples\n of vertices with their color also as part of the \nTuple\n\nis expected as the argument.\n\n\nsource:\n\n\nThreeJS/src/render.jl:416\n\n\n\n\n\n\nlinematerial() \n\u00b6\n\n\nCreates a line material tag.\nThese tags should be the child of a line tag.\nPossible properties that can be set are:\n    - \nkind\n - \n\"basic\"\n or \n\"dashed\"\n\n    - \ncolor\n - Any CSS color value.\n    - \nlinewidth\n - Sets the width of the line.\n    - \nscale\n - For \n\"dashed\"\n only. Scale of the dash.\n    - \ndashSize\n -  For \n\"dashed\"\n only. Sets size of the dash.\n    - \nlinecap\n - Ends of the line. Possible values are \n\"round\"\n, \n\"butt\"\n, and\n    \n\"square\"\n.\n    - \nlinejoin\n - Appearance of line joins. Possible values are \n\"round\"\n,\n    \n\"bevel\"\n and \n\"miter\"\n.\nRefer the ThreeJS docs for \nLineDashedMaterial\n\nand \nLineBasicMaterial\n\nfor more details.\n\n\nThese properties should be passed in as a \nDict\n.\n\n\nsource:\n\n\nThreeJS/src/render.jl:460\n\n\n\n\n\n\nlinematerial(props) \n\u00b6\n\n\nCreates a line material tag.\nThese tags should be the child of a line tag.\nPossible properties that can be set are:\n    - \nkind\n - \n\"basic\"\n or \n\"dashed\"\n\n    - \ncolor\n - Any CSS color value.\n    - \nlinewidth\n - Sets the width of the line.\n    - \nscale\n - For \n\"dashed\"\n only. Scale of the dash.\n    - \ndashSize\n -  For \n\"dashed\"\n only. Sets size of the dash.\n    - \nlinecap\n - Ends of the line. Possible values are \n\"round\"\n, \n\"butt\"\n, and\n    \n\"square\"\n.\n    - \nlinejoin\n - Appearance of line joins. Possible values are \n\"round\"\n,\n    \n\"bevel\"\n and \n\"miter\"\n.\nRefer the ThreeJS docs for \nLineDashedMaterial\n\nand \nLineBasicMaterial\n\nfor more details.\n\n\nThese properties should be passed in as a \nDict\n.\n\n\nsource:\n\n\nThreeJS/src/render.jl:460\n\n\n\n\n\n\nmaterial() \n\u00b6\n\n\nCreates a material tag with properties passed in as a dictionary.\n\n\nsource:\n\n\nThreeJS/src/render.jl:257\n\n\n\n\n\n\nmaterial(props::Dict{K, V}) \n\u00b6\n\n\nCreates a material tag with properties passed in as a dictionary.\n\n\nsource:\n\n\nThreeJS/src/render.jl:257\n\n\n\n\n\n\nmesh(x::Float64,  y::Float64,  z::Float64) \n\u00b6\n\n\nCreates a Three-js mesh at position (\nx\n,\ny\n,\nz\n).\nKeyword arguments for rotation are available, being \nrx\n, \nry\n and \nrz\n for\nrotation about X, Y and Z axes respectively. These are to be specified in\ndegrees.\nGeometry and Material tags are added as children to this Elem, to render a mesh.\n\n\nsource:\n\n\nThreeJS/src/render.jl:15\n\n\n\n\n\n\nmeshlines(slices::Int64,  stacks::Int64,  xrange::Range{T},  yrange::Range{T},  f::Function) \n\u00b6\n\n\nCreates a mesh plot.\nTakes \nx\n values between \nxrange\n divided into \nslices+1\n equal intervals.\nTakes \ny\n values between \nyrange\n divided into \nstacks+1\n equal intervals.\nApplies a function \nf\n passed to all such \nx\n and \ny\n values and creates\nvertices of coordinates \n(x,y,z)\n and a joins them horizontally and vertically,\ncreating a mesh.\n\n\nReturns an array of \nline\n elements which should be under the \nscene\n.\n\n\nA colormap can also be passed to set the vertice colors to a corresponding color\nusing the keyword argument \ncolormap\n.\n\n\nsource:\n\n\nThreeJS/src/render.jl:225\n\n\n\n\n\n\noctahedron(radius::Float64) \n\u00b6\n\n\nCreates a icosahedron geometry of radius \nradius\n.\nShould be put in a \nmesh\n along with another material Elem to render.\n\n\nsource:\n\n\nThreeJS/src/render.jl:104\n\n\n\n\n\n\nouterdiv() \n\u00b6\n\n\nOuter div to keep the three-js tag in.\n\n\nsource:\n\n\nThreeJS/src/ThreeJS.jl:12\n\n\n\n\n\n\nouterdiv(w::AbstractString) \n\u00b6\n\n\nOuter div to keep the three-js tag in.\n\n\nsource:\n\n\nThreeJS/src/ThreeJS.jl:12\n\n\n\n\n\n\nouterdiv(w::AbstractString,  h::AbstractString) \n\u00b6\n\n\nOuter div to keep the three-js tag in.\n\n\nsource:\n\n\nThreeJS/src/ThreeJS.jl:12\n\n\n\n\n\n\nparametric(slices::Int64,  stacks::Int64,  xrange::Range{T},  yrange::Range{T},  f::Function) \n\u00b6\n\n\nCreates a parametric surface.\nTakes \nx\n values between \nxrange\n divided into \nslices+1\n equal intervals.\nTakes \ny\n values between \nyrange\n divided into \nstacks+1\n equal intervals.\nApplies a function \nf\n passed to all such \nx\n and \ny\n values and creates vertices\nof coordinates \n(x,y,z)\n and a surface containing these vertices.\n\n\nA colormap can also be passed to set the vertice colors to a corresponding color\nusing the keyword argument \ncolormap\n.\nNOTE: Such colors will be displayed only with a \nmaterial\n with \ncolorkind\n set\nto \n\"vertex\"\n and \ncolor\n to \n\"white\"\n.\n\n\nsource:\n\n\nThreeJS/src/render.jl:179\n\n\n\n\n\n\nplane(width::Float64,  height::Float64) \n\u00b6\n\n\nCreates a plane in the XY plane with specified width and height centered\naround the origin.\nShould be put in a \nmesh\n along with another material Elem to render.\n\n\nsource:\n\n\nThreeJS/src/render.jl:127\n\n\n\n\n\n\npointlight(x::Float64,  y::Float64,  z::Float64) \n\u00b6\n\n\nCreates a point light tag.\nA point light at position \n(x,y,z)\n is created. Keyword arguments of \ncolor\n\nsetting the color of the light, \nintensity\n and \ndistance\n for setting the\nintensity and distance properties are also accepted.\n\n\nsource:\n\n\nThreeJS/src/render.jl:290\n\n\n\n\n\n\npyramid(b::Float64,  h::Float64) \n\u00b6\n\n\nCreates a square base Pyramid geometry of base \nb\n and height \nh\n.\nShould be put in a \nmesh\n along with another material Elem to render.\n\n\nsource:\n\n\nThreeJS/src/render.jl:51\n\n\n\n\n\n\nsphere(r::Float64) \n\u00b6\n\n\nCreates a Sphere geometry of radius \nr\n.\nShould be put in a \nmesh\n along with another material Elem to render.\n\n\nsource:\n\n\nThreeJS/src/render.jl:43\n\n\n\n\n\n\nspotlight(x::Float64,  y::Float64,  z::Float64) \n\u00b6\n\n\nCreates a spot light tag.\nA spot light at position \n(x,y,z)\n is created. Keyword arguments of \ncolor\n\nsetting the color of the light, \nintensity\n, \ndistance\n, \nangle\n, \nexponent\n,\n\nshadow\n for setting the intensity, distance, angle(in degrees) and exponent\nproperties are also accepted. \nShadow\n is a \nBool\n to set if shadows are\nenabled or not.\n\n\nsource:\n\n\nThreeJS/src/render.jl:319\n\n\n\n\n\n\ntetrahedron(radius::Float64) \n\u00b6\n\n\nCreates a tetrahedron geometry of radius \nradius\n.\nShould be put in a \nmesh\n along with another material Elem to render.\n\n\nsource:\n\n\nThreeJS/src/render.jl:115\n\n\n\n\n\n\ntorus(radius::Float64,  tube::Float64) \n\u00b6\n\n\nCreates a Torus geometry of radius \nradius\n and tube radius \ntube\n.\nShould be put in a \nmesh\n along with another material Elem to render.\n\n\nsource:\n\n\nThreeJS/src/render.jl:71", 
            "title": "ThreeJS"
        }, 
        {
            "location": "/api/ThreeJS/#threejs", 
            "text": "", 
            "title": "ThreeJS"
        }, 
        {
            "location": "/api/ThreeJS/#exported", 
            "text": "ambientlight()  \u00b6  Creates an ambient light tag.\nAmbient light is applied equally to all objects.\nThe color of the light is set using the  color  argument.  source:  ThreeJS/src/render.jl:351    ambientlight(color::ColorTypes.RGB{FixedPointNumbers.UfixedBase{UInt8, 8}})  \u00b6  Creates an ambient light tag.\nAmbient light is applied equally to all objects.\nThe color of the light is set using the  color  argument.  source:  ThreeJS/src/render.jl:351    box(w::Float64,  h::Float64,  d::Float64)  \u00b6  Creates a Box geometry of width  w , height  h  and depth  d .\nShould be put in a  mesh  along with another material Elem to render.  source:  ThreeJS/src/render.jl:35    camera(x::Float64,  y::Float64,  z::Float64)  \u00b6  Creates a camera tag.\nPerspective camera at position  (x,y,z)  created. Keyword arguments of  near , far , aspect , and  fov  is accepted.  source:  ThreeJS/src/render.jl:266    cylinder(top::Float64,  bottom::Float64,  height::Float64)  \u00b6  Creates a Cylinder geometry of bottom radius  bottom , top radius  top  and\nheight  h .\nShould be put in a  mesh  along with another material Elem to render.  source:  ThreeJS/src/render.jl:60    dodecahedron(radius::Float64)  \u00b6  Creates a Dodecahedron geometry of radius  radius .\nShould be put in a  mesh  along with another material Elem to render.  source:  ThreeJS/src/render.jl:82    geometry(vertices::Array{Tuple{Float64, Float64, Float64}, 1},  faces::Array{Tuple{Int64, Int64, Int64}, 1})  \u00b6  Creates a geometry.\nThis should be a child of a  mesh .\nVertices of the geometry are passed in as a vector of  Tuples  of the coordinates\nalong with faces of the geometry which are again passed in as a vector of  Tuples \nof  Int  representing the indices of the vertices to be joined.  source:  ThreeJS/src/render.jl:141    grid(size::Float64,  step::Float64)  \u00b6  Creates a grid element.\nThese should be a child of the scene tag created by  initscene .\nThe  size  represents the total size and the  step  represents the distance\nbetween consecutive lines of the grid.  The grid can be translated and rotated using keyword arguments, x , y , z  for the (x, y, z) coordinate and  rx ,  ry  and  rz \nas the rotation about the X, Y and Z axes respectively.  source:  ThreeJS/src/render.jl:474    icosahedron(radius::Float64)  \u00b6  Creates a icosahedron geometry of radius  radius .\nShould be put in a  mesh  along with another material Elem to render.  source:  ThreeJS/src/render.jl:93    initscene()  \u00b6  Initiates a three-js scene  source:  ThreeJS/src/ThreeJS.jl:17    line(vertices::Array{Tuple{Float64, Float64, Float64}, 1})  \u00b6  Creates a line tag.\nLine tags should be a child of the scene tag created by  initscene .  Vertices of the line to be drawn should be passed in as a  Vector  of Tuple{Float64, Float64, Float64} .\nThe material to be associated with the line can be set using linematerial  which should be a child of the line tag.  A keyword argument,  kind  is also provided to set how the lines\nshould be drawn.  \"strip\"  and  \"pieces\"  are the possible values.  The line can be translated and rotated using keyword arguments, x , y , z  for the (x, y, z) coordinate and  rx ,  ry  and  rz \nas the rotation about the X, Y and Z axes respectively.  Colors for the vertices can be set by passing in a  Vector  of Color  as the  vertexcolors  kwarg.  source:  ThreeJS/src/render.jl:378    line(verticeswithcolor::Array{Tuple{Float64, Float64, Float64, ColorTypes.Color{T, N}}, 1})  \u00b6  Helper function to make creating  line  easier. Tuples  of vertices with their color also as part of the  Tuple \nis expected as the argument.  source:  ThreeJS/src/render.jl:416    linematerial()  \u00b6  Creates a line material tag.\nThese tags should be the child of a line tag.\nPossible properties that can be set are:\n    -  kind  -  \"basic\"  or  \"dashed\" \n    -  color  - Any CSS color value.\n    -  linewidth  - Sets the width of the line.\n    -  scale  - For  \"dashed\"  only. Scale of the dash.\n    -  dashSize  -  For  \"dashed\"  only. Sets size of the dash.\n    -  linecap  - Ends of the line. Possible values are  \"round\" ,  \"butt\" , and\n     \"square\" .\n    -  linejoin  - Appearance of line joins. Possible values are  \"round\" ,\n     \"bevel\"  and  \"miter\" .\nRefer the ThreeJS docs for  LineDashedMaterial \nand  LineBasicMaterial \nfor more details.  These properties should be passed in as a  Dict .  source:  ThreeJS/src/render.jl:460    linematerial(props)  \u00b6  Creates a line material tag.\nThese tags should be the child of a line tag.\nPossible properties that can be set are:\n    -  kind  -  \"basic\"  or  \"dashed\" \n    -  color  - Any CSS color value.\n    -  linewidth  - Sets the width of the line.\n    -  scale  - For  \"dashed\"  only. Scale of the dash.\n    -  dashSize  -  For  \"dashed\"  only. Sets size of the dash.\n    -  linecap  - Ends of the line. Possible values are  \"round\" ,  \"butt\" , and\n     \"square\" .\n    -  linejoin  - Appearance of line joins. Possible values are  \"round\" ,\n     \"bevel\"  and  \"miter\" .\nRefer the ThreeJS docs for  LineDashedMaterial \nand  LineBasicMaterial \nfor more details.  These properties should be passed in as a  Dict .  source:  ThreeJS/src/render.jl:460    material()  \u00b6  Creates a material tag with properties passed in as a dictionary.  source:  ThreeJS/src/render.jl:257    material(props::Dict{K, V})  \u00b6  Creates a material tag with properties passed in as a dictionary.  source:  ThreeJS/src/render.jl:257    mesh(x::Float64,  y::Float64,  z::Float64)  \u00b6  Creates a Three-js mesh at position ( x , y , z ).\nKeyword arguments for rotation are available, being  rx ,  ry  and  rz  for\nrotation about X, Y and Z axes respectively. These are to be specified in\ndegrees.\nGeometry and Material tags are added as children to this Elem, to render a mesh.  source:  ThreeJS/src/render.jl:15    meshlines(slices::Int64,  stacks::Int64,  xrange::Range{T},  yrange::Range{T},  f::Function)  \u00b6  Creates a mesh plot.\nTakes  x  values between  xrange  divided into  slices+1  equal intervals.\nTakes  y  values between  yrange  divided into  stacks+1  equal intervals.\nApplies a function  f  passed to all such  x  and  y  values and creates\nvertices of coordinates  (x,y,z)  and a joins them horizontally and vertically,\ncreating a mesh.  Returns an array of  line  elements which should be under the  scene .  A colormap can also be passed to set the vertice colors to a corresponding color\nusing the keyword argument  colormap .  source:  ThreeJS/src/render.jl:225    octahedron(radius::Float64)  \u00b6  Creates a icosahedron geometry of radius  radius .\nShould be put in a  mesh  along with another material Elem to render.  source:  ThreeJS/src/render.jl:104    outerdiv()  \u00b6  Outer div to keep the three-js tag in.  source:  ThreeJS/src/ThreeJS.jl:12    outerdiv(w::AbstractString)  \u00b6  Outer div to keep the three-js tag in.  source:  ThreeJS/src/ThreeJS.jl:12    outerdiv(w::AbstractString,  h::AbstractString)  \u00b6  Outer div to keep the three-js tag in.  source:  ThreeJS/src/ThreeJS.jl:12    parametric(slices::Int64,  stacks::Int64,  xrange::Range{T},  yrange::Range{T},  f::Function)  \u00b6  Creates a parametric surface.\nTakes  x  values between  xrange  divided into  slices+1  equal intervals.\nTakes  y  values between  yrange  divided into  stacks+1  equal intervals.\nApplies a function  f  passed to all such  x  and  y  values and creates vertices\nof coordinates  (x,y,z)  and a surface containing these vertices.  A colormap can also be passed to set the vertice colors to a corresponding color\nusing the keyword argument  colormap .\nNOTE: Such colors will be displayed only with a  material  with  colorkind  set\nto  \"vertex\"  and  color  to  \"white\" .  source:  ThreeJS/src/render.jl:179    plane(width::Float64,  height::Float64)  \u00b6  Creates a plane in the XY plane with specified width and height centered\naround the origin.\nShould be put in a  mesh  along with another material Elem to render.  source:  ThreeJS/src/render.jl:127    pointlight(x::Float64,  y::Float64,  z::Float64)  \u00b6  Creates a point light tag.\nA point light at position  (x,y,z)  is created. Keyword arguments of  color \nsetting the color of the light,  intensity  and  distance  for setting the\nintensity and distance properties are also accepted.  source:  ThreeJS/src/render.jl:290    pyramid(b::Float64,  h::Float64)  \u00b6  Creates a square base Pyramid geometry of base  b  and height  h .\nShould be put in a  mesh  along with another material Elem to render.  source:  ThreeJS/src/render.jl:51    sphere(r::Float64)  \u00b6  Creates a Sphere geometry of radius  r .\nShould be put in a  mesh  along with another material Elem to render.  source:  ThreeJS/src/render.jl:43    spotlight(x::Float64,  y::Float64,  z::Float64)  \u00b6  Creates a spot light tag.\nA spot light at position  (x,y,z)  is created. Keyword arguments of  color \nsetting the color of the light,  intensity ,  distance ,  angle ,  exponent , shadow  for setting the intensity, distance, angle(in degrees) and exponent\nproperties are also accepted.  Shadow  is a  Bool  to set if shadows are\nenabled or not.  source:  ThreeJS/src/render.jl:319    tetrahedron(radius::Float64)  \u00b6  Creates a tetrahedron geometry of radius  radius .\nShould be put in a  mesh  along with another material Elem to render.  source:  ThreeJS/src/render.jl:115    torus(radius::Float64,  tube::Float64)  \u00b6  Creates a Torus geometry of radius  radius  and tube radius  tube .\nShould be put in a  mesh  along with another material Elem to render.  source:  ThreeJS/src/render.jl:71", 
            "title": "Exported"
        }, 
        {
            "location": "/api/", 
            "text": "API-INDEX\n\n\nMODULE: ThreeJS\n\n\n\n\nMethods [Exported]\n\n\nambientlight()\n  Creates an ambient light tag.\n\n\nambientlight(color::ColorTypes.RGB{FixedPointNumbers.UfixedBase{UInt8, 8}})\n  Creates an ambient light tag.\n\n\nbox(w::Float64,  h::Float64,  d::Float64)\n  Creates a Box geometry of width \nw\n, height \nh\n and depth \nd\n.\n\n\ncamera(x::Float64,  y::Float64,  z::Float64)\n  Creates a camera tag.\n\n\ncylinder(top::Float64,  bottom::Float64,  height::Float64)\n  Creates a Cylinder geometry of bottom radius \nbottom\n, top radius \ntop\n and\n\n\ndodecahedron(radius::Float64)\n  Creates a Dodecahedron geometry of radius \nradius\n.\n\n\ngeometry(vertices::Array{Tuple{Float64, Float64, Float64}, 1},  faces::Array{Tuple{Int64, Int64, Int64}, 1})\n  Creates a geometry.\n\n\ngrid(size::Float64,  step::Float64)\n  Creates a grid element.\n\n\nicosahedron(radius::Float64)\n  Creates a icosahedron geometry of radius \nradius\n.\n\n\ninitscene()\n  Initiates a three-js scene\n\n\nline(vertices::Array{Tuple{Float64, Float64, Float64}, 1})\n  Creates a line tag.\n\n\nline(verticeswithcolor::Array{Tuple{Float64, Float64, Float64, ColorTypes.Color{T, N}}, 1})\n  Helper function to make creating \nline\n easier.\n\n\nlinematerial()\n  Creates a line material tag.\n\n\nlinematerial(props)\n  Creates a line material tag.\n\n\nmaterial()\n  Creates a material tag with properties passed in as a dictionary.\n\n\nmaterial(props::Dict{K, V})\n  Creates a material tag with properties passed in as a dictionary.\n\n\nmesh(x::Float64,  y::Float64,  z::Float64)\n  Creates a Three-js mesh at position (\nx\n,\ny\n,\nz\n).\n\n\nmeshlines(slices::Int64,  stacks::Int64,  xrange::Range{T},  yrange::Range{T},  f::Function)\n  Creates a mesh plot.\n\n\noctahedron(radius::Float64)\n  Creates a icosahedron geometry of radius \nradius\n.\n\n\nouterdiv()\n  Outer div to keep the three-js tag in.\n\n\nouterdiv(w::AbstractString)\n  Outer div to keep the three-js tag in.\n\n\nouterdiv(w::AbstractString,  h::AbstractString)\n  Outer div to keep the three-js tag in.\n\n\nparametric(slices::Int64,  stacks::Int64,  xrange::Range{T},  yrange::Range{T},  f::Function)\n  Creates a parametric surface.\n\n\nplane(width::Float64,  height::Float64)\n  Creates a plane in the XY plane with specified width and height centered\n\n\npointlight(x::Float64,  y::Float64,  z::Float64)\n  Creates a point light tag.\n\n\npyramid(b::Float64,  h::Float64)\n  Creates a square base Pyramid geometry of base \nb\n and height \nh\n.\n\n\nsphere(r::Float64)\n  Creates a Sphere geometry of radius \nr\n.\n\n\nspotlight(x::Float64,  y::Float64,  z::Float64)\n  Creates a spot light tag.\n\n\ntetrahedron(radius::Float64)\n  Creates a tetrahedron geometry of radius \nradius\n.\n\n\ntorus(radius::Float64,  tube::Float64)\n  Creates a Torus geometry of radius \nradius\n and tube radius \ntube\n.", 
            "title": "Home"
        }, 
        {
            "location": "/api/#api-index", 
            "text": "", 
            "title": "API-INDEX"
        }, 
        {
            "location": "/api/#module-threejs", 
            "text": "", 
            "title": "MODULE: ThreeJS"
        }, 
        {
            "location": "/api/#methods-exported", 
            "text": "ambientlight()   Creates an ambient light tag.  ambientlight(color::ColorTypes.RGB{FixedPointNumbers.UfixedBase{UInt8, 8}})   Creates an ambient light tag.  box(w::Float64,  h::Float64,  d::Float64)   Creates a Box geometry of width  w , height  h  and depth  d .  camera(x::Float64,  y::Float64,  z::Float64)   Creates a camera tag.  cylinder(top::Float64,  bottom::Float64,  height::Float64)   Creates a Cylinder geometry of bottom radius  bottom , top radius  top  and  dodecahedron(radius::Float64)   Creates a Dodecahedron geometry of radius  radius .  geometry(vertices::Array{Tuple{Float64, Float64, Float64}, 1},  faces::Array{Tuple{Int64, Int64, Int64}, 1})   Creates a geometry.  grid(size::Float64,  step::Float64)   Creates a grid element.  icosahedron(radius::Float64)   Creates a icosahedron geometry of radius  radius .  initscene()   Initiates a three-js scene  line(vertices::Array{Tuple{Float64, Float64, Float64}, 1})   Creates a line tag.  line(verticeswithcolor::Array{Tuple{Float64, Float64, Float64, ColorTypes.Color{T, N}}, 1})   Helper function to make creating  line  easier.  linematerial()   Creates a line material tag.  linematerial(props)   Creates a line material tag.  material()   Creates a material tag with properties passed in as a dictionary.  material(props::Dict{K, V})   Creates a material tag with properties passed in as a dictionary.  mesh(x::Float64,  y::Float64,  z::Float64)   Creates a Three-js mesh at position ( x , y , z ).  meshlines(slices::Int64,  stacks::Int64,  xrange::Range{T},  yrange::Range{T},  f::Function)   Creates a mesh plot.  octahedron(radius::Float64)   Creates a icosahedron geometry of radius  radius .  outerdiv()   Outer div to keep the three-js tag in.  outerdiv(w::AbstractString)   Outer div to keep the three-js tag in.  outerdiv(w::AbstractString,  h::AbstractString)   Outer div to keep the three-js tag in.  parametric(slices::Int64,  stacks::Int64,  xrange::Range{T},  yrange::Range{T},  f::Function)   Creates a parametric surface.  plane(width::Float64,  height::Float64)   Creates a plane in the XY plane with specified width and height centered  pointlight(x::Float64,  y::Float64,  z::Float64)   Creates a point light tag.  pyramid(b::Float64,  h::Float64)   Creates a square base Pyramid geometry of base  b  and height  h .  sphere(r::Float64)   Creates a Sphere geometry of radius  r .  spotlight(x::Float64,  y::Float64,  z::Float64)   Creates a spot light tag.  tetrahedron(radius::Float64)   Creates a tetrahedron geometry of radius  radius .  torus(radius::Float64,  tube::Float64)   Creates a Torus geometry of radius  radius  and tube radius  tube .", 
            "title": "Methods [Exported]"
        }
    ]
}